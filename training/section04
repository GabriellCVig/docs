=======

.. _introduction-1:

Introduction
------------

In this chapter you will learn about Systems; the component which
connects Sesam to the external world. They are an integral component of
Sesam and have a wide array of uses, so we will start off by introducing
the general knowledge you should have at-hand while setting one up.

Onwards you will learn how Systems interface with Pipes and how to use
customized solutions when Sesams built-in systems cannot.

2. .. rubric:: Systems: Beginner
      :name: systems-beginner

   16. .. rubric:: What is a system in Sesam?
          :name: what-is-a-system-in-sesam

Everything external to the node

17. .. rubric:: Introduction to SQL & Json systems
       :name: introduction-to-sql-json-systems

18. .. rubric:: Pipe interaction with systems.
       :name: pipe-interaction-with-systems.

Input, output (mention transform?)

19. .. rubric:: How to create a system with Templates
       :name: how-to-create-a-system-with-templates

20. .. rubric:: Environment variables & Secrets
       :name: environment-variables-secrets

How are secrets stored in the backend? – Discuss with product

How do systems read secrets? Encrypted and decrypted in transmission or
passed as plain text?

$SECRET

$ENV

JSON Push & Pull protocol
~~~~~~~~~~~~~~~~~~~~~~~~~

Lots of info in docs.

Tasks for Systems: Beginner
~~~~~~~~~~~~~~~~~~~~~~~~~~~

2. .. rubric:: Systems: Novice
      :name: systems-novice

   7. .. rubric:: What is a system in Sesam?
         :name: what-is-a-system-in-sesam-1

| General introduction to what systems are and what problems they solve.
| Everything external to the node

Systems as a pipe source
~~~~~~~~~~~~~~~~~~~~~~~~

System configuration (mostly) defines the possibilities pipes have to
pull data.

We need to write about what a system is in the context of a pipe source,
with not only configs but explanations. Keep it simple don’t go into too
many system types (json & SQL?). Write more text than configurations,
draw stuff. (1-N)

Systems as a pipe sink
~~~~~~~~~~~~~~~~~~~~~~

Same as above only with system as a sink. What is a system in the
context of a sink? What does the pipe see? What does the system see?
(1-N)

[System?] Authentication methods 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| Default authentication methods built in for systems handling URLS
  $SECRET()
| Basic, Oauth2, JWT, microservices

| Authentication methods for specific systems: ?? worth mentioning
| SQL, oracle

System Types
~~~~~~~~~~~~

| Mention all built in system types, is there a common denominator?
| refer to appendix/documentation for more information

“Type”: “system_XXXX”

2. .. rubric:: Tasks for Systems: Novice
      :name: tasks-for-systems-novice

3. .. rubric:: Systems: Intermediate
      :name: systems-intermediate

   12. .. rubric:: Microservice System
          :name: microservice-system

How does Sesam look at microservices?

What is a microservice?

How do I use one?

Don’t go too deep, we have a whole module for these.

Probably want to wait with this subchapter until we’ve written the
microservices module.

HTTP Transforms
~~~~~~~~~~~~~~~

When you need to transform or append information which Sesam isn’t good
at handling, you’d use an http_transform.

When you don’t want all the data from a system, but need to append it to
the data you’re processing, you’d typically do a http_transform.

Example: You want to get the current weather for a location, but you
don’t want to read all the weather around the world constantly into
sesam. What you’re interested in is the weather for a location specified
by an entity at runtime. You can get this by querying an API per entity
being processed.vor

Example: You need to convert UTM to LatLong coordinates. Sesam doesn’t
have a function to do this built in, so you make a microservice to do
the conversion and call this with an http_transform.

General Example: appending time-dependent datapoints to your output
without reading absolutely all of the time-dependented data.

Chaining of Systems
~~~~~~~~~~~~~~~~~~~

Microservices are easily re-used if they do generic stuff.

The point of chaining microservices or API’s is to use multiple generic,
simple services to solve a bigger complex problem.

Pros: Usually re-use of microservices makes development time shorter

Cons: Debugging can be complex and unforeseen issues hard to find &
pinpoint. Can’t see it in the graph, need to search the whole node
configuration to find the systems.

2.3 Tasks for Systems: Intermediate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _epilogue-1:

Epilogue
--------

Summarize the topics the reader has gone through on a very high level.

In relation to the introduction, tell them what they’ve learned and what
they should be capable of using this knowledge to do.

DTL – The language of Pipes
